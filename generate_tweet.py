import json
import pandas as pd
from run_prompt import execute_gemini_for_tweet_creation, execute_gemini_for_tweets_comparison
from run_gpt import execute_gpt_for_tweet_creation
from threading import Thread

def get_top5(analysed_tweets, eng_type):
    """
    Filters and returns the top 5 tweets based on a specific engagement type.

    Parameters:
        analysed_tweets (list): List of tweet dictionaries with engagement data.
        eng_type (str): Engagement type to filter by (e.g., 'like', 'retweet').

    Returns:
        list: Top 5 tweets sorted by engagement_score.
    """
    df = pd.DataFrame(analysed_tweets)

    # Filter tweets by the specified engagement type
    filtered_df = df[df['engagement_type'] == eng_type]

    # Select top 5 tweets with highest engagement score
    top5_df = filtered_df.nlargest(n=5, columns=['engagement_score'])

    # Convert DataFrame to list of dictionaries
    return top5_df.to_dict(orient='records')

def create_tweet(prompt):
    """
    Generates a tweet using a few-shot prompt strategy based on top-performing tweets.

    Parameters:
        prompt (str): The core prompt describing the tweet to be generated.

    Returns:
        dict: Output from the Gemini model containing the generated tweet and analysis.
    """
    # Load previously analyzed tweets from JSON file
    with open('analyzed_tweets.json') as file:
        analysed_tweets = json.load(file)

    # Define the engagement type to filter by
    engagement_type = "like"  # Can be changed to 'retweet', 'reply', etc.

    # Get top 5 tweets based on engagement type
    top5_tweets = get_top5(analysed_tweets, engagement_type)

    # Handle edge cases: no top tweets or empty prompt
    if not top5_tweets or prompt == '':
        print(f"No tweets found for engagement type '{engagement_type}'.")
        return None

    # If prompt is empty, use a default prompt about Microsoft 365 Copilot
    if prompt == '':
        prompt = """
            Write a tweet announcing the launch of Microsoft 365 Copilot, highlighting its AI-powered productivity features. Focus on how it transforms everyday workflows in Word, Excel, PowerPoint, and Teams by automating tasks, summarizing meetings, generating content, and analyzing data.

            Make the tweet appeal to tech-savvy professionals, developers, and productivity enthusiasts who crave smarter tools and seamless integration. Emphasize Copilot’s ability to save time, reduce cognitive load, and unlock creative potential.

            The tone should be futuristic, empowering, and crisp — something that makes users feel like they’re stepping into the next era of intelligent work.
        """

    # Construct the system prompt using few-shot examples and the user prompt
    system_prompt = f"""
        Create an engaging twitter tweet for Microsoft company.
        PROMPT: {prompt}

        Here are some example tweets and their sentiment analysis with very high user engagement of other similar companies.
        Example Tweets:
        {top5_tweets}

        Create the tweet, compare it with the example tweets, and predict and explain why and how this tweet will perform well compared to the given examples. The tone should be futuristic, empowering, and crisp — something that makes users feel like they’re stepping into the next era of intelligent work.
    """

    # Generate tweet using Gemini model
    out = execute_gemini_for_tweet_creation(prompt=system_prompt)

    '''
    # Extract generated output
    tweet = out['tweet']
    prediction = out['prediction']
    explanation = out['explanation']

    # Print generated output
    print("Generated Tweet:", tweet)
    print("Prediction:", prediction)
    print("Explanation:", explanation)

    # Save the output to a JSON file
    with open("generated_tweet.json", 'w') as file:
        json.dump(out, file, indent=4)
    '''

    return out

def create_compare_tweets_with_gemini_models(prompt):
    """
    Generate and compare tweets from two different Gemini models using top-performing tweet examples.

    Parameters:
    - prompt (str): The core prompt describing the tweet to be generated.

    Returns:
    - dict: A structured comparison of tweets generated by two Gemini models, including predictions and explanations.
    """

    # Load previously analyzed tweets with engagement metrics
    with open('analyzed_tweets.json') as file:
        analysed_tweets = json.load(file)

    # Define the engagement type to filter by (e.g., 'like', 'retweet')
    engagement_type = "like"

    # Extract top 5 tweets based on engagement score for the selected type
    top5_tweets = get_top5(analysed_tweets, engagement_type)

    # Handle case where no tweets match the engagement type
    if not top5_tweets:
        print(f"No tweets found for engagement type '{engagement_type}'.")
        return

    # If no prompt is provided, use a default one focused on Microsoft 365 Copilot
    if prompt == '':
        prompt = """
            Write a tweet announcing the launch of Microsoft 365 Copilot, highlighting its AI-powered productivity features. Focus on how it transforms everyday workflows in Word, Excel, PowerPoint, and Teams by automating tasks, summarizing meetings, generating content, and analyzing data.

            Make the tweet appeal to tech-savvy professionals, developers, and productivity enthusiasts who crave smarter tools and seamless integration. Emphasize Copilot’s ability to save time, reduce cognitive load, and unlock creative potential.

            The tone should be futuristic, empowering, and crisp — something that makes users feel like they’re stepping into the next era of intelligent work.
        """

    # Construct the system prompt using few-shot examples and the user prompt
    system_prompt = f"""
        Create an engaging twitter tweet for Microsoft company.
        PROMPT: {prompt}

        Here are some example tweets and their sentiment analysis with very high user engagement of other similar companies.
        Example Tweets:
        {top5_tweets}

        Create the tweet, compare it with the example tweets, and predict and explain why and how this tweet will perform well compared to the given examples. The tone should be futuristic, empowering, and crisp — something that makes users feel like they’re stepping into the next era of intelligent work.
    """

    # Define the two Gemini models to compare
    model_a = "gemini-2.0-flash"
    model_b = "gemini-2.5-flash-lite"

    # Define a wrapper function for each thread
    def generate_tweet(model_name, prompt, output_container, key):
        tweet = execute_gemini_for_tweet_creation(prompt=prompt, model_name=model_name)
        output_container[key] = tweet

    # Shared dictionary to store outputs
    outputs = {}

    # Create threads for both models
    thread_a = Thread(target=generate_tweet, args=(model_a, system_prompt, outputs, 'model_a'))
    thread_b = Thread(target=generate_tweet, args=(model_b, system_prompt, outputs, 'model_b'))

    # Start both threads
    thread_a.start()
    thread_b.start()

    # Wait for both threads to finish
    thread_a.join()
    thread_b.join()

    # Access the results
    output_a = outputs['model_a']
    output_b = outputs['model_b']

    # Extract tweet content and metadata from model A
    tweet_a = output_a.get("tweet", None)
    prediction_a = output_a.get("prediction", "unknown")
    explanation_a = output_a.get("explanation", "Failed to parse response.")

    # Extract tweet content and metadata from model B
    tweet_b = output_b.get("tweet", None)
    prediction_b = output_b.get("prediction", "unknown")
    explanation_b = output_b.get("explanation", "Failed to parse response.")

    # Construct a comparison prompt to evaluate both tweets
    comparison_prompt = f"""
    You are an expert in social media engagement analysis.

    Compare the following two tweets announcing Microsoft 365 Copilot. Evaluate them based on clarity, emotional appeal, relevance to target audience (tech-savvy professionals), and likelihood of high engagement.

    Tweet A:
    "{tweet_a}"

    Tweet B:
    "{tweet_b}"

    Provide:
    - tweet_a_vs_tweet_b: Comparative analysis highlighting strengths and weaknesses of each tweet.
    - prediction: Which tweet will perform better and why.
    - explanation: Reasoning referencing tone, structure, and audience alignment.
    """

    # Use a third Gemini model to perform the comparison
    model_comp = "gemini-2.5-flash"
    output = execute_gemini_for_tweets_comparison(prompt=comparison_prompt, model_name=model_comp)

    # Extract comparison results
    tweet_comparison = output.get("tweet_a_vs_tweet_b", "Comparison not available.")
    prediction = output.get("prediction", "unknown")
    explanation = output.get("explanation", "Failed to parse explanation.")

    '''
    # Model A outputs
    print("=== Model A ===")
    print(f"Tweet: {tweet_a}")
    print(f"Prediction: {prediction_a}")
    print(f"Explanation: {explanation_a}\n")

    # Model B outputs
    print("=== Model B ===")
    print(f"Tweet: {tweet_b}")
    print(f"Prediction: {prediction_b}")
    print(f"Explanation: {explanation_b}\n")

    # Comparison and final prediction
    print("=== Comparison ===")
    print(f"Tweet Comparison: {tweet_comparison}")
    print(f"Final Prediction: {prediction}")
    print(f"Final Explanation: {explanation}")

    # Save output to file
    with open("compared_tweet.json", 'w') as file:
        json.dump(output, file, indent=4)
    '''

    # Structure the final output dictionary
    out = {
        "model_a": {
            "name": model_a,
            "tweet": tweet_a,
            "prediction": prediction_a,
            "explanation": explanation_a
        },
        "model_b": {
            "name": model_b,
            "tweet": tweet_b,
            "prediction": prediction_b,
            "explanation": explanation_b
        },
        "comparison": {
            "name": model_comp,
            "tweet_a_vs_tweet_b": tweet_comparison,
            "prediction": prediction,
            "explanation": explanation
        }
    }

    return out

def compare_tweets(analysed_tweets):
    """
    Generates two distinct tweets using Gemini and compares them with each other
    and with top-performing tweets from similar companies.

    Parameters:
        analysed_tweets (list): List of tweet dictionaries with engagement data.
    """
    engagement_type = "like"  # Engagement metric to filter by (can be changed)

    # Extract top 5 tweets based on engagement score for the selected type
    top5_tweets = get_top5(analysed_tweets, engagement_type)

    # Handle case where no tweets match the engagement type
    if not top5_tweets:
        print(f"No tweets found for engagement type '{engagement_type}'.")
        return

    # Prompt describing the tweet generation task
    prompt = """
        Write two distinct tweets announcing the launch of Microsoft 365 Copilot, highlighting its AI-powered productivity features.
        Focus on how it transforms workflows in Word, Excel, PowerPoint, and Teams by automating tasks, summarizing meetings, generating content, and analyzing data.

        Make both tweets appeal to tech-savvy professionals, developers, and productivity enthusiasts.
        Emphasize Copilot’s ability to save time, reduce cognitive load, and unlock creative potential.

        The tone should be futuristic, empowering, and crisp — something that makes users feel like they’re stepping into the next era of intelligent work.
    """

    # Construct system prompt with few-shot examples and comparison instructions
    system_prompt = f"""
        Create two engaging tweets for Microsoft company.
        PROMPT: {prompt}

        Here are some example tweets and their sentiment analysis with very high user engagement from similar companies:
        Example Tweets:
        {top5_tweets}

        Compare the two generated tweets with each other and with the examples.
    """

    # Call Gemini to generate and compare tweets
    out = execute_gemini_for_tweets_comparison(prompt=system_prompt)

    # Extract and print results
    tweet_a = out['tweet_a']
    tweet_b = out['tweet_b']
    tweet_comparison = out['tweet_a_vs_tweet_b']
    prediction = out['prediction']
    explanation = out['explanation']

    print("Tweet A:", tweet_a)
    print("Tweet B:", tweet_b)
    print("Tweet A vs Tweet B:", tweet_comparison)
    print("Prediction:", prediction)
    print("Explanation:", explanation)

    # Save output to file
    with open("tweet_comparison.json", 'a') as file:
        json.dump(out, file, indent=4)

def gemini_gpt_tweets_creation(analysed_tweets):
    """
    Generates tweets using both Gemini and OpenAI models, compares their predictions and explanations,
    and saves the results for benchmarking.

    Parameters:
        analysed_tweets (list): List of tweet dictionaries with engagement data.
    """
    engagement_type = "like"  # Engagement metric to filter by

    # Extract top 5 tweets based on engagement score
    top5_tweets = get_top5(analysed_tweets, engagement_type)

    # Handle case where no tweets match the engagement type
    if not top5_tweets:
        print(f"No tweets found for engagement type '{engagement_type}'.")
        return

    # Prompt describing the tweet generation task
    prompt = """
        Write a tweet announcing the launch of Microsoft 365 Copilot, highlighting its AI-powered productivity features. Focus on how it transforms everyday workflows in Word, Excel, PowerPoint, and Teams by automating tasks, summarizing meetings, generating content, and analyzing data.

        Make the tweet appeal to tech-savvy professionals, developers, and productivity enthusiasts who crave smarter tools and seamless integration. Emphasize Copilot’s ability to save time, reduce cognitive load, and unlock creative potential.

        The tone should be futuristic, empowering, and crisp — something that makes users feel like they’re stepping into the next era of intelligent work.
    """

    # Construct system prompt with few-shot examples and performance prediction
    system_prompt = f"""
        Create an engaging twitter tweet for Microsoft company.
        PROMPT: {prompt}

        Here are some example tweets and their sentiment analysis with very high user engagement of other similar companies.
        Example Tweets:
        {top5_tweets}

        Create the tweet, compare it with the example tweets, and predict and explain why and how this tweet will perform well compared to the given examples.
    """

    # Generate tweet using Gemini
    gemini_output = execute_gemini_for_tweet_creation(prompt=system_prompt)

    # Generate tweet using OpenAI
    openai_output = execute_gpt_for_tweet_creation(prompt=system_prompt)

    # Parse OpenAI output safely
    try:
        openai_dict = json.loads(openai_output)
    except json.JSONDecodeError:
        openai_dict = {
            "tweet": None,
            "prediction": "unknown",
            "explanation": "Failed to parse OpenAI response."
        }

    # Print Gemini output
    print("\n🔵 Gemini Tweet:")
    print("Tweet:", gemini_output["tweet"])
    print("Prediction:", gemini_output["prediction"])
    print("Explanation:", gemini_output["explanation"])

    # Print OpenAI output
    print("\n🟣 OpenAI Tweet:")
    print("Tweet:", openai_dict["tweet"])
    print("Prediction:", openai_dict["prediction"])
    print("Explanation:", openai_dict["explanation"])

    # Save both outputs to file for benchmarking
    with open("generated_tweet.json", 'a') as file:
        json.dump({
            "gemini": gemini_output,
            "openai": openai_dict
        }, file, indent=4)


'''
if __name__ == '__main__':
    with open('analyzed_tweets.json') as file:
        data = json.load(file)
        # print("First tweet loaded:", data[0])
        # create_tweet(data)
        # compare_tweets(data)
        # create_and_compare_tweets(data)
        create_compare_tweets_with_gemini_models(data)
'''